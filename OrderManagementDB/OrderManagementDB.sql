Create database OrderManagementDB;

USE OrderManagementDB;

SELECT *  FROM CUSTOMERS;
SELECT * FROM ORDER_ITEMS;
SELECT * FROM ORDERS;

--  Get all customers with their orders. Using Basic JOIN;
SELECT C.NAME, C.COUNTRY, O.ORDER_ID,O.TOTAL_AMOUNT
FROM CUSTOMERS c 
JOIN ORDERS O 
ON C.CUSTOMER_ID = O.CUSTOMER_ID;

-- List all customers and their orders (even those with no orders). Using LEFT JOIN;
SELECT C.NAME,O.ORDER_ID,O.TOTAL_AMOUNT
FROM CUSTOMERS C 
LEFT JOIN ORDERS O 
ON C.CUSTOMER_ID = O.CUSTOMER_ID;

-- Find customers who spent above the average order amount. Using Subquery;
SELECT NAME 
FROM CUSTOMERS
WHERE CUSTOMER_ID IN (
SELECT CUSTOMER_ID
FROM ORDERS
WHERE TOTAL_AMOUNT > (SELECT AVG(TOTAL_AMOUNT) FROM ORDERS)
);

-- Find each customer’s total spending using a CTE;
WITH CUSTOMERTOTALS AS (
SELECT CUSTOMER_ID, SUM(TOTAL_AMOUNT) AS TOTAL_SPENT
FROM ORDERS
GROUP BY CUSTOMER_ID
)
SELECT C.NAME,CT.TOTAL_SPENT
FROM CUSTOMERS C 
JOIN CUSTOMERTOTALS CT
ON C.CUSTOMER_ID = CT.CUSTOMER_ID; 

-- Rank customers by their total spending. Using Window Function (Ranking);
SELECT C.NAME, SUM(O.TOTAL_AMOUNT) AS TOTAL_SPENT,
RANK() OVER (ORDER BY SUM(O.TOTAL_AMOUNT) DESC) AS RANK_POSITION
FROM CUSTOMERS C 
JOIN ORDERS O 
ON C.CUSTOMER_ID = O.CUSTOMER_ID
GROUP BY C.NAME;

-- Show orders with a running total of spending by date. Window Function (Running Total)
SELECT ORDER_ID, ORDER_DATE, TOTAL_AMOUNT,
SUM(TOTAL_AMOUNT) OVER (ORDER BY ORDER_DATE) AS RUNNUNG_TOTAL
FROM ORDERS;

-- List each order with the products and total price per item. Using Advanced JOIN;
SELECT O.ORDER_ID, C.NAME, I.PRODUCT_NAME, I.QUANTITY, (I.QUANTITY * I.PRICE)
AS ITEM_TOTAL
FROM ORDERS O 
JOIN CUSTOMERS C 
ON O.CUSTOMER_ID = C.CUSTOMER_ID
JOIN ORDER_ITEMS I 
ON O.ORDER_ID = I.ORDER_ID;

/*Find the highest order amount and the customer who made it.
 Using Subquery with Aggregation*/
 SELECT C.NAME,O.TOTAL_AMOUNT
 FROM ORDERS O 
 JOIN CUSTOMERS C 
 ON O.CUSTOMER_ID = C.CUSTOMER_ID
 WHERE O.TOTAL_AMOUNT = (SELECT MAX(TOTAL_AMOUNT) FROM ORDERS);
 
 -- Find customers who placed more than one order. Using CTE with Filtering;
 WITH ORDERCOUNTS AS (
 SELECT CUSTOMER_ID, COUNT(ORDER_ID) AS ORDER_COUNT
 FROM ORDERS
 GROUP BY CUSTOMER_ID
 )
 SELECT C.NAME, OC.ORDER_COUNT
 FROM CUSTOMERS C 
 JOIN ORDERCOUNTS OC 
 ON C.CUSTOMER_ID = OC.CUSTOMER_ID
 WHERE OC.ORDER_COUNT > 1;
 
-- Rank products by total sales value. Using Window Function (Dense Rank);
SELECT PRODUCT_NAME, SUM(QUANTITY * PRICE) AS TOTAL_SALES,
DENSE_RANK() OVER( ORDER BY SUM(QUANTITY * PRICE) DESC) AS SALES_RANK
FROM ORDER_ITEMS
GROUP BY PRODUCT_NAME;

-- Find the names of customers who bought a Laptop. Using Nested Subquery;
SELECT DISTINCT C.NAME
FROM CUSTOMERS C 
WHERE C.CUSTOMER_ID IN (
SELECT O.CUSTOMER_ID
FROM ORDERS O 
JOIN ORDER_ITEMS I 
ON O.ORDER_ID = I.ORDER_ID
WHERE I.PRODUCT_NAME = "LAPTOP"
);

/*Show each order and the customer’s average order amount.
 Using Window Function*/
 SELECT O.ORDER_ID, C.NAME, O.TOTAL_AMOUNT,
 AVG(O.TOTAL_AMOUNT) OVER (PARTITION BY C.CUSTOMER_ID) AS AVG_CUSTOMER_SPENT
 FROM ORDERS O 
 JOIN CUSTOMERS C 
 ON O.CUSTOMER_ID = C.CUSTOMER_ID;
 
 -- Find pairs of customers from the same country. Using Self-Join
SELECT A.NAME AS CUSTOMER1,B.NAME AS CUSTOMER2,A.COUNTRY
FROM CUSTOMERS A 
JOIN CUSTOMERS B 
ON A.COUNTRY = B.COUNTRY AND A.CUSTOMER_ID < B.CUSTOMER_ID;
 
 /*Divide customers into 3 spending tiers. Using Window Function (NTILE)*/
 SELECT C.NAME, SUM(O.TOTAL_AMOUNT) AS TOTAL_SPENT,
 NTILE(3) OVER (ORDER BY SUM(O.TOTAL_AMOUNT) DESC) AS SPENDING_TIER
 FROM CUSTOMERS C 
 JOIN ORDERS O 
 ON C.CUSTOMER_ID = O.CUSTOMER_ID
 GROUP BY C.NAME;
